// Code generated by MockGen. DO NOT EDIT.
// Source: public-api/client (interfaces: ListingClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	model "public-api/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockListingClient is a mock of ListingClient interface.
type MockListingClient struct {
	ctrl     *gomock.Controller
	recorder *MockListingClientMockRecorder
}

// MockListingClientMockRecorder is the mock recorder for MockListingClient.
type MockListingClientMockRecorder struct {
	mock *MockListingClient
}

// NewMockListingClient creates a new mock instance.
func NewMockListingClient(ctrl *gomock.Controller) *MockListingClient {
	mock := &MockListingClient{ctrl: ctrl}
	mock.recorder = &MockListingClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListingClient) EXPECT() *MockListingClientMockRecorder {
	return m.recorder
}

// CreateListing mocks base method.
func (m *MockListingClient) CreateListing(arg0 model.Listing) (*model.Listing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateListing", arg0)
	ret0, _ := ret[0].(*model.Listing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateListing indicates an expected call of CreateListing.
func (mr *MockListingClientMockRecorder) CreateListing(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateListing", reflect.TypeOf((*MockListingClient)(nil).CreateListing), arg0)
}

// FetchListings mocks base method.
func (m *MockListingClient) FetchListings(arg0, arg1 int, arg2 *int64) ([]model.Listing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchListings", arg0, arg1, arg2)
	ret0, _ := ret[0].([]model.Listing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchListings indicates an expected call of FetchListings.
func (mr *MockListingClientMockRecorder) FetchListings(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchListings", reflect.TypeOf((*MockListingClient)(nil).FetchListings), arg0, arg1, arg2)
}
